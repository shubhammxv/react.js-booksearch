{"version":3,"sources":["components/BookData.js","components/SearchBook.js","components/DataFetch.js","App.js","serviceWorker.js","index.js"],"names":["Book","propsData","title","this","props","authors","publisher","publishedDate","averageRating","repeat","ratingsCount","imageLink","Object","keys","forEach","key","undefined","className","src","alt","Component","SearchBook","type","value","onChange","changed","onClick","clicked","FetchData","state","booksData","currentSearch","onChangeHandler","event","setState","target","searchClickHandler","componentDidMount","isbn","url","fetch","then","results","json","data","items","map","bookData","book","volumeInfo","imageLinks","thumbnail","err","id","description","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+SAwCeA,G,6LAlCP,IACIC,EAAY,CACZC,MAAOC,KAAKC,MAAMF,MAClBG,QAASF,KAAKC,MAAMC,QACpBC,UAAWH,KAAKC,MAAME,UACtBC,cAAeJ,KAAKC,MAAMG,cAC1BC,cANO,SAMaC,OAAON,KAAKC,MAAMI,eACtCE,aAAcP,KAAKC,MAAMM,aACzBC,UAAWR,KAAKC,MAAMO,WAS1B,OANAC,OAAOC,KAAKZ,GAAWa,SAAQ,SAAAC,QACJC,IAAnBf,EAAUc,IAAyC,KAAnBd,EAAUc,KAC1Cd,EAAUc,GAAO,SAKrB,yBAAKE,UAAU,YACX,6BAAK,yBAAKC,IAAKjB,EAAUU,UAAWQ,IAAI,UACxC,yBAAKF,UAAU,QACX,6BAAK,qCAAL,IAAoBhB,EAAUC,OAC9B,6BAAK,uCAAgBD,EAAUI,SAC/B,6BAAK,0CAAmBJ,EAAUK,WAClC,6BAAK,+CAAwBL,EAAUM,eACvC,6BAAK,+CAAwBN,EAAUO,cAAvC,KACA,6BAAK,8CAAuBP,EAAUS,oB,GA7BvCU,cCwBJC,G,uLArBP,OACI,6BACI,2BACEJ,UAAU,eACVK,KAAK,OACLC,MAAOpB,KAAKC,MAAMmB,MAClBC,SAAUrB,KAAKC,MAAMqB,UAEvB,4BACER,UAAU,gBACVS,QAASvB,KAAKC,MAAMuB,SAFtB,e,GAXSP,cCsEVQ,E,2MAnEXC,MAAQ,CACAC,UAAY,GACZC,cAAe,I,EA6CvBC,gBAAkB,SAACC,GACf,EAAKC,SAAS,CAACH,cAAeE,EAAME,OAAOZ,S,EAG/Ca,mBAAqB,WACjB,EAAKC,kBAAkB,EAAKR,MAAME,gB,mFA/CR,IAAD,OAAVO,EAAU,uDAAL,GAChBC,EAAM,sDAAwDD,EAClEE,MAAMD,GACLE,MAAK,SAAAC,GACF,OAAOA,EAAQC,UAElBF,MAAK,SAAAG,GACF,IACI,IAAId,EAAYc,EAAKC,MAAMC,KAAI,SAACC,GAC5B,IACIpC,EADAqC,EAAOD,EAASE,WAEpB,IACItC,EAAYqC,EAAKE,WAAWC,UAEhC,MAAMC,GACFzC,EAAY,yEAEhB,OACI,yBACII,IAAKgC,EAASM,IACd,kBAAC,EAAD,CACInD,MAAO8C,EAAK9C,MACZG,QAAS2C,EAAK3C,QACdC,UAAW0C,EAAK1C,UAChBC,cAAeyC,EAAKzC,cACpB+C,YAAaN,EAAKM,YAClB9C,cAAewC,EAAKxC,cACpBE,aAAcsC,EAAKtC,aACnBC,UAAWA,IAEf,iCAIZ,EAAKuB,SAAS,CAACJ,UAAWA,IAE9B,MAAOsB,GACHG,MAAM,gC,+BAcd,OACI,6BACA,kBAAC,EAAD,CAAY5B,QAASxB,KAAKiC,mBAAoBX,QAAStB,KAAK6B,gBAAiBT,MAAOpB,KAAK0B,MAAME,gBAC/F,yBAAKd,UAAU,YACVd,KAAK0B,MAAMC,gB,GA7DJV,aCSToC,E,iLARX,OACE,yBAAKvC,UAAU,OACX,kBAAC,EAAD,W,GAJQG,aCQEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACD,kBAAC,EAAD,MACFC,SAASC,eAAe,SDyHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.c44e7535.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../Styles/BookData.css'\n\nclass Book extends Component {\n\n    render() {\n        let star = \"â˜…\";\n        let propsData = {\n            title: this.props.title,\n            authors: this.props.authors,\n            publisher: this.props.publisher,\n            publishedDate: this.props.publishedDate,\n            averageRating: star.repeat(this.props.averageRating),\n            ratingsCount: this.props.ratingsCount,\n            imageLink: this.props.imageLink\n        }\n\n        Object.keys(propsData).forEach(key => {\n            if (propsData[key] === undefined || propsData[key] === '') {\n                propsData[key] = \"NA\"\n            }\n        })\n\n        return(\n            <div className=\"BookData\">\n                <div><img src={propsData.imageLink} alt=\"Book\" /></div>\n                <div className=\"Book\">\n                    <div><b>Title:</b> {propsData.title}</div>\n                    <div><b>Author: </b>{propsData.authors}</div>\n                    <div><b>Publisher: </b>{propsData.publisher}</div>\n                    <div><b>Published Date: </b>{propsData.publishedDate}</div>\n                    <div><b>Average Rating: </b>{propsData.averageRating} </div>\n                    <div><b>Rating Counts: </b>{propsData.ratingsCount}</div>\n                    {/* <p>Description: {this.props.description}</p> */}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Book;","import React, { Component } from 'react';\nimport '../Styles/SearchBook.css'\n\nclass SearchBook extends Component {\n\n    render() {\n        return (\n            <div>\n                <input\n                  className=\"search-input\"\n                  type=\"text\"\n                  value={this.props.value}\n                  onChange={this.props.changed}\n                />\n                <button\n                  className=\"search-button\"\n                  onClick={this.props.clicked}\n                >\n                  Search\n                </button>\n            </div>\n\n        )\n    }\n\n}\n\nexport default SearchBook;","import React, { Component } from 'react';\nimport '../Styles/DataFetch.css'\nimport Book from './BookData';\nimport SearchBook from './SearchBook'\n\nclass FetchData extends Component {\n    state = {\n            booksData : [],\n            currentSearch: ''\n        }\n\n    componentDidMount( isbn='' ) {\n        let url = 'https://www.googleapis.com/books/v1/volumes?q=isbn:' + isbn;\n        fetch(url)\n        .then(results => {\n            return results.json();\n        })\n        .then(data => {\n            try {\n                let booksData = data.items.map((bookData) => {\n                    let book = bookData.volumeInfo;\n                    let imageLink;\n                    try {\n                        imageLink = book.imageLinks.thumbnail;\n                    }\n                    catch(err) {\n                        imageLink = 'https://upload.wikimedia.org/wikipedia/en/d/d1/Image_not_available.png'\n                    }\n                    return (\n                        <div \n                            key={bookData.id} >\n                            <Book \n                                title={book.title}\n                                authors={book.authors}\n                                publisher={book.publisher}\n                                publishedDate={book.publishedDate}\n                                description={book.description}\n                                averageRating={book.averageRating}\n                                ratingsCount={book.ratingsCount}\n                                imageLink={imageLink}\n                            />\n                            <hr />\n                        </div>\n                    )\n                })\n                this.setState({booksData: booksData})\n            }\n            catch (err) {\n                alert('Product does not exist')\n            }\n        })\n    }\n\n    onChangeHandler = (event) => {\n        this.setState({currentSearch: event.target.value})\n    }\n\n    searchClickHandler = () => {\n        this.componentDidMount(this.state.currentSearch);\n    }\n\n    render() {\n        return (\n            <div>\n            <SearchBook clicked={this.searchClickHandler} changed={this.onChangeHandler} value={this.state.currentSearch}/>\n            <div className=\"bookData\">\n                {this.state.booksData}\n            </div>\n            </div>\n        )\n    }\n}\n\nexport default FetchData;","import React, {Component} from 'react';\nimport FetchData from './components/DataFetch'\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <FetchData />\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, {Component} from 'react';\n// import './App.css';\n// import Person from './React Tutorial/Styling/Styling'\n\n// class App extends Component {\n//   state = {\n//     persons: [\n//       { id: 'asfa1', name: 'Max', age: 28 },\n//       { id: 'vasdf1', name: 'Manu', age: 29 },\n//       { id: 'asdf11', name: 'Stephanie', age: 26 }\n//     ],\n//     otherState: 'some other value',\n//     showPersons: false\n//   }\n\n//   nameChangedHandler = ( event, id ) => {\n//     const personIndex = this.state.persons.findIndex(p => {\n//       return p.id === id;\n//     });\n\n//     const person = {\n//       ...this.state.persons[personIndex]\n//     };\n\n//     // const person = Object.assign({}, this.state.persons[personIndex]);\n\n//     person.name = event.target.value;\n\n//     const persons = [...this.state.persons];\n//     persons[personIndex] = person;\n\n//     this.setState( {persons: persons} );\n//   }\n\n//   deletePersonHandler = (personIndex) => {\n//     // const persons = this.state.persons.slice();\n//     const persons = [...this.state.persons];\n//     persons.splice(personIndex, 1);\n//     this.setState({persons: persons});\n//   }\n\n//   togglePersonsHandler = () => {\n//     const doesShow = this.state.showPersons;\n//     this.setState( { showPersons: !doesShow } );\n//   }\n\n//   render () {\n//     const style = {\n//       backgroundColor: 'green',\n//       color: 'white',\n//       font: 'inherit',\n//       border: '1px solid blue',\n//       padding: '8px',\n//       cursor: 'pointer',\n//     };\n\n//     let persons = null;\n\n//     if ( this.state.showPersons ) {\n//       persons = (\n//         <div>\n//           {this.state.persons.map((person, index) => {\n//             return <Person\n//               click={() => this.deletePersonHandler(index)}\n//               name={person.name} \n//               age={person.age}\n//               key={person.id}\n//               changed={(event) => this.nameChangedHandler(event, person.id)} />\n//           })}\n//         </div>\n//       );\n\n//       style.backgroundColor = 'red';\n//     }\n\n//     let classes = [];\n//     if (this.state.persons.length<=2) {\n//       classes.push('red')\n//     }\n//     if (this.state.persons.length<=1)  {\n//       classes.push('bold');\n//     }\n\n//     return (\n//       <div className=\"App\">\n//         <h1>Hi, I'm a React App</h1>\n//         <p className={classes.join(' ')}>This is really working!</p>\n//         <button\n//           style={style}\n//           onClick={this.togglePersonsHandler}>Toggle Persons</button>\n//         {persons}\n//       </div>\n//     );\n//     // return React.createElement('div', {className: 'App'}, React.createElement('h1', null, 'Does this work now?'));\n//   }\n// }\n\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <App />\n    , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}